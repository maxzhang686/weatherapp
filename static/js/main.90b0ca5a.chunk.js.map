{"version":3,"sources":["page/WeeksDetail.js","utilities/index.js","page/CityDetail.js","page/index.js","App.js","serviceWorker.js","index.js"],"names":["WeeksDetail","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","console","log","date","day","dayOfWeek","Date","getDay","isNaN","getDayOfWeek","react_default","a","createElement","Containerweather","src","icon","alt","temp","sum","React","Component","styled","div","_templateObject","CityDetail","state","WeatherLeftPart","TempContainer","condition","OtherContainer","humidity","wind","CityDetail_templateObject","_templateObject2","_templateObject3","_templateObject4","API","Dashboard","fetchData","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","fetch","city","then","respons","json","data","setState","catch","err","stop","handleChange","event","target","value","isLoading","Container","page_Containerweather","Left","current","page_CityDetail","temp_c","wind_mph","text","Right","className","id","name","onChange","Buttompart","forecast","forecastday","map","page_WeeksDetail","key","avgtemp_c","Button","variant","color","page_templateObject","page_templateObject2","page_templateObject3","page_templateObject4","_templateObject5","App","page","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+cAgCeA,cA3Bb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,OACAI,QAAQC,IAAI,SAAWT,EAAMU,MAFZT,wEAKjB,IAAMU,ECTH,SAAsBD,GACzB,IAAIE,EAAY,IAAIC,KAAKH,GAAMI,SAC/B,OAAOC,MAAMH,GAAa,KAAO,CAAC,MAAO,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAOA,GDOzEI,CAAaZ,KAAKJ,MAAMU,MAEpC,OACKO,EAAAC,EAAAC,cAACC,EAAD,KACDH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKR,IAEPM,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKE,IAAKjB,KAAKJ,MAAMsB,KAAMC,IAAI,MAEjCN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKf,KAAKJ,MAAMwB,KAAhB,YAEFP,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAIf,KAAKJ,MAAMyB,cApBCC,IAAMC,WA+B1BP,EAAmBQ,IAAOC,IAAVC,wnBE+BPC,cA7Db,SAAAA,EAAY/B,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA2B,IAChB9B,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA6B,GAAAxB,KAAAH,QACK4B,MAAM,GAFK/B,wEAgChB,OAEMgB,EAAAC,EAAAC,cAACc,EAAD,KACGhB,EAAAC,EAAAC,cAACe,EAAD,KAAejB,EAAAC,EAAAC,cAAA,cAASf,KAAKJ,MAAMwB,KAApB,WAEhBP,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKf,KAAKJ,MAAMmC,YAGlBlB,EAAAC,EAAAC,cAACiB,EAAD,KACInB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,UAAKf,KAAKJ,MAAMqC,SAAhB,MAEFpB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,gBAEFF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,UAAKf,KAAKJ,MAAMsC,KAAhB,iBApDOZ,IAAMC,WAwEzBM,EAAkBL,IAAOC,IAAVU,KAUfL,EAAgBN,IAAOC,IAAVW,KAMbJ,EAAiBR,IAAOC,IAAVY,KAURb,IAAOC,IAAVa,i2BC9FT,IAAMC,EAAM,gFAiHGC,cA/Gb,SAAAA,IAAa,IAAA3C,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAwC,IACX3C,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0C,GAAArC,KAAAH,QAOFyC,UARa3C,OAAA4C,EAAA,EAAA5C,CAAA6C,EAAA7B,EAAA8B,KAQF,SAAAC,IAAA,OAAAF,EAAA7B,EAAAgC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACX7C,QAAQC,IAAI,YACV6C,MAAOX,EAAI1C,EAAK+B,MAAMuB,KAAK,WACxBC,KAAK,SAAAC,GAAYA,EAAQC,OACvBF,KAAK,SAAAG,GAAQ1D,EAAK2D,SAAS,CAACD,SAAOnD,QAAQC,IAAIkD,OAGjDE,MAAM,SAAAC,GAAG,OAAItD,QAAQC,IAAI,SAPnB,wBAAA0C,EAAAY,SAAAd,MAREhD,EAiCf+D,aAAe,SAAAC,GAEbhE,EAAK2D,SAAS,CAAEL,KAAMU,EAAMC,OAAOC,OAAS,WAC1ClE,EAAK4C,eAlCL5C,EAAK+B,MAAQ,CACXuB,KAAM,SACNa,WAAW,GAJFnE,mFA6BXG,KAAKyC,6CAYL,IAAMc,EAAOvD,KAAK4B,MAAM2B,KAMxB,OAEI1C,EAAAC,EAAAC,cAACkD,EAAD,KAEEpD,EAAAC,EAAAC,cAACmD,EAAD,KACErD,EAAAC,EAAAC,cAACoD,EAAD,KACGZ,GAAOA,EAAKa,SACPvD,EAAAC,EAAAC,cAACsD,EAAD,CACEjD,KAAMmC,EAAKa,QAAQE,OACnBrC,SAAUsB,EAAKa,QAAQnC,SACvBC,KAAMqB,EAAKa,QAAQG,SACnBxC,UAAWwB,EAAKa,QAAQrC,UAAUyC,QAK5C3D,EAAAC,EAAAC,cAAC0D,EAAD,KACM5D,EAAAC,EAAAC,cAAA,WACG,IACDF,EAAAC,EAAAC,cAAA,cAAQF,EAAAC,EAAAC,cAAA,cAAMf,KAAK4B,MAAMuB,QAE3BtC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACE2D,UAAU,eACVC,GAAG,OACHC,KAAK,OACLb,MAAO/D,KAAK4B,MAAMuB,KAClB0B,SAAU7E,KAAK4D,cAEf/C,EAAAC,EAAAC,cAAA,UAAQgD,MAAM,UAAd,UACAlD,EAAAC,EAAAC,cAAA,UAAQgD,MAAM,SAAd,SACAlD,EAAAC,EAAAC,cAAA,UAAQgD,MAAM,SAAd,eAOdlD,EAAAC,EAAAC,cAAC+D,EAAD,KAECvB,GAAMA,EAAKwB,SAASC,YAAYC,IAAI,SAAC1E,EAAKoE,GAAN,OACvB9D,EAAAC,EAAAC,cAACmE,EAAD,CACEC,IAAKR,EACLrE,KAAMC,EAAID,KACVY,KAAMX,EAAIA,IAAIwB,UAAUb,KACxBE,KAAMb,EAAIA,IAAI6E,UACd/D,IAAKd,EAAIA,IAAIwB,UAAUyC,UASvC3D,EAAAC,EAAAC,cAACsE,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,WAAlC,uBAvGgBjE,IAAMC,WAkHxB0C,EAAYzC,IAAOC,IAAV+D,KAaTxE,EAAmBQ,IAAOC,IAAVgE,KAWhBtB,EAAO3C,IAAOC,IAAViE,KAIJjB,EAAQjD,IAAOC,IAAVkE,KAKLb,EAAatD,IAAOC,IAAVmE,iBC1IDC,MAXf,WACE,OACEhF,EAAAC,EAAAC,cAAA,OAAK4D,GAAG,cAEN9D,EAAAC,EAAAC,cAAC+E,EAAD,QCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxF,EAAAC,EAAAC,cAACuF,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvD,KAAK,SAAAwD,GACjCA,EAAaC","file":"static/js/main.90b0ca5a.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { getDayOfWeek } from \"../utilities\";\n\nclass WeeksDetail extends React.Component{\n  constructor(props) {\n    super();\n    console.log(\"props:\" + props.date);\n  }\n  render(){\n    const day = getDayOfWeek(this.props.date);\n\n    return(\n         <Containerweather>\n        <div>\n          <h3>{day}</h3>\n        </div>\n        <div>\n          <img src={this.props.icon} alt=\"\" />\n        </div>\n        <div>\n          <h5>{this.props.temp} °C </h5>\n        </div>\n        <div>\n          <p>{this.props.sum}</p>\n        </div>\n        </Containerweather>\n      \n    );\n  }\n}\n\nexport default WeeksDetail;\n\n\nconst Containerweather = styled.div`\n  display: flex;\n  flex:1;\n  flex-direction: column;\n\n`;","\nexport function getDayOfWeek(date) {\n    var dayOfWeek = new Date(date).getDay();    \n    return isNaN(dayOfWeek) ? null : ['Sun', 'Mon', 'Tues', 'Wed', 'Thur', 'Fri', 'Sat'][dayOfWeek];\n  }\n\n","import React from 'react';\nimport styled from 'styled-components';\n\n\nclass CityDetail extends React.Component{\n  constructor(props){\n    super()\n    this.state={\n     \n    }\n  }\n\n\n  // componentDidMount(){\n  //     fetch('https://api.apixu.com/v1/current.json?key=dd644d7e780742f8af1111744192707&q=Paris')\n  //     .then(respons => {respons.json()\n  //       // .then(data=> {this.setState({current:data.current,location:data.location});console.log(data)\n  //       .then(data=> {this.setState(data);console.log(data)\n  //       })\n  //     })\n  //     .catch(err => console.log('err'))\n  // }\n\n\n  //  async componentDidMount(){\n  //    await fetch('https://api.apixu.com/v1/current.json?key=dd644d7e780742f8af1111744192707&q=Paris')\n  //     .then(respons => respons.json())\n  //     .then(data=> this.setState(data))\n  //     // .then(data=>this.setState({current:data.current,location:data.location})\n  //     .catch(err => console.log('err'))\n  //     console.log(this.state.data)\n  // }\n\n\n\n\n  render(){\n    return(\n        \n          <WeatherLeftPart>\n             <TempContainer><strong>{this.props.temp} °C</strong></TempContainer>\n\n            <div>\n              <h3>{this.props.condition}</h3>\n            </div>\n            \n            <OtherContainer>\n                <div>\n                  <h5>HUMIDITY</h5>\n                  <h5>{this.props.humidity}%</h5>\n                </div>\n                <div>\n                  <h1>|</h1>\n                </div>\n                <div>\n                  <h5>WIND</h5>\n                  <h5>{this.props.wind}K/m</h5>\n                </div>\n            </OtherContainer>\n\n          </WeatherLeftPart>\n      \n    );\n  }\n}\n\nexport default CityDetail;\n\n// const Box = styled.div`\n// min-width:100px;\n// width:400px;\n// max-width: 100%;\n\n// `;\n\n\nconst WeatherLeftPart = styled.div`\n height: 100%;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  color: black;\n`;\n\nconst TempContainer = styled.div`\n  font-size:50px;\n  display: flex;\n  \n  text-align: center;\n`;\nconst OtherContainer = styled.div`\n  display: flex;\n  \n  flex-direction: row;\n  justify-content: space-around;\n  align-items: flex-start;\n  width: 60%;\n`;\n\n\nconst xxx = styled.div`\n\n`;","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport styled from 'styled-components';\nimport axios from \"axios\";\nimport WeeksDetail from './WeeksDetail';\nimport CityDetail from './CityDetail';\n\n\nconst API = 'https://api.apixu.com/v1/forecast.json?key=dd644d7e780742f8af1111744192707&q=';\nclass Dashboard extends React.Component{\n  constructor(){\n    super()\n    this.state = {\n      city: 'Sydney',\n      isLoading: false\n    };\n  }\n\n  fetchData =async() => {\n  console.log(\"fetching\");\n    fetch( API+this.state.city+\"&days=5\")\n      .then(respons => {respons.json()\n        .then(data=> {this.setState({data});console.log(data)\n        })\n      })\n      .catch(err => console.log('err'))\n  };\n \n  // fetchData =async() => {\n  //   await fetch(API+this.state.city)\n  //     .then(respons => respons.json())\n  //     .then(data=> this.setState(data))\n  //     // .then(data=>this.setState({current:data.current,location:data.location})\n  //     .catch(err => console.log('err'))\n  //     console.log(this.state.data)\n  //   };\n\n \n componentDidMount() {\n    this.fetchData();\n}\n\n\nhandleChange = event => {\n  //important！setState is async,must use call back\n  this.setState({ city: event.target.value }, () => {\n    this.fetchData();\n  });\n};\n\n  render(){\n    const data = this.state.data;\n    // // const forecast = this.state.forecast;\n    // // const current = this.state.current;\n    // // console.log(\"rendering\" + forecast);\n    // console.log(\"rendering\" + data);\n\n    return(\n      \n        <Container>\n          \n          <Containerweather>\n            <Left>\n              {data &&data.current && (\n                    <CityDetail\n                      temp={data.current.temp_c}\n                      humidity={data.current.humidity}\n                      wind={data.current.wind_mph}\n                      condition={data.current.condition.text}\n                    />\n                  )}\n            </Left>\n\n            <Right>\n                  <div>\n                    {\" \"}\n                    <strong><h1> {this.state.city}</h1></strong>\n                  </div>\n                  <div>\n                    <select\n                      className=\"form-control\"\n                      id=\"city\"\n                      name=\"city\"\n                      value={this.state.city}\n                      onChange={this.handleChange}\n                    >\n                      <option value=\"Sydney\">Sydney</option>\n                      <option value=\"Tokyo\">Tokyo</option>\n                      <option value=\"Pairs\">Beijing</option>\n                    </select>\n                  </div>\n            \n            </Right>\n          </Containerweather>\n          \n        <Buttompart>\n        \n        {data&&data.forecast.forecastday.map((day, id) => (\n                      <WeeksDetail\n                        key={id}\n                        date={day.date}\n                        icon={day.day.condition.icon}\n                        temp={day.day.avgtemp_c}\n                        sum={day.day.condition.text}\n                      />\n                    ))}\n        </Buttompart>\n        \n\n       \n\n\n        <Button variant=\"contained\" color=\"primary\">\n        Hello World\n        </Button>\n        </Container>\n      \n    );\n  }\n}\n\nexport default Dashboard;\n\nconst Container = styled.div`\nwidth:100%;\nheight:100%;\ndisplay: flex;\ntext-align: center;\nflex-direction: column;\nalign-items:stretch;\nmax-width:1200px;\nmax-height:800px;\nmin-width:410px;\nmargin:0 auto;\n`;\n\nconst Containerweather = styled.div`\ndisplay:flex;\nflex: 6;\nflex-direction: row ;\nflex-wrap: wrap;\njustify-content:center;\nalign-items:center;\nbackground-color:#ffffffbf;\nmargin: 100px 50px 0 50px;\n`;\n\nconst Left = styled.div`\nflex:1;\n`;\n\nconst Right = styled.div`\nflex:1;\n`;\n\n\nconst Buttompart = styled.div`\nflex: 5;\ndisplay: flex;\nflex-direction: row;\nbackground-color:#ffffffbf;\nmargin:  1px 50px 50px 50px;\njustify-content: center;\n\n`;","import React from 'react';\nimport Dashboard from './page';\nimport './App.css';\nimport './Background.css';\n\n\n\nfunction App() {\n  return (\n    <div id='background'>\n    \n      <Dashboard/>\n      \n    \n    </div>\n  );\n}\n\nexport default App;\n ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}