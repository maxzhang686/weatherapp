{"version":3,"sources":["page/WeeksDetail.js","page/CityDetail.js","page/index.js","App.js","serviceWorker.js","index.js"],"names":["WeeksDetail","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","console","log","date","react_default","a","createElement","Containerweather","moment","format","src","concat","icon","alt","tempmin","toFixed","tempmax","React","Component","styled","div","_templateObject","CityDetail","state","WeatherLeftPart","TempContainer","temp","condition","OtherContainer","humidity","Line","wind","CityDetail_templateObject","_templateObject2","_templateObject3","_templateObject4","Dashboard","_useState","useState","_useState2","slicedToArray","weatherData","setWeatherData","_useState3","_useState4","cityId","setCityId","getWeatherData","fetch","method","then","response","json","catch","err","useEffect","data","Container","page_Containerweather","Left","currently","page_CityDetail","data1","temperature","windSpeed","summary","Right","timezone","className","id","name","value","onChange","event","target","Buttompart","daily","map","day","i","page_WeeksDetail","key","time","temperatureLow","temperatureHigh","sum","page_templateObject","page_templateObject2","page_templateObject3","page_templateObject4","_templateObject5","App","page","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cd40f762.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n//import { getDayOfWeek } from \"../utilities\";\nimport moment from \"moment\";\n\nclass WeeksDetail extends React.Component {\n  constructor(props) {\n    super();\n    console.log(\"props:\" + props.date);\n  }\n  render() {\n    // const day = getDayOfWeek(this.props.date);\n\n    return (\n      <Containerweather>\n        <div>\n          <h3>{moment(this.props.date * 1000).format(\"DD MMM\")}</h3>\n          <h3>{moment(this.props.date * 1000).format(\"ddd\")}</h3>\n        </div>\n        <div>\n          <img src={`./img/${this.props.icon}.png`} alt=\"\" />\n        </div>\n        <div>\n          <p>\n            {this.props.tempmin.toFixed(1)}- {this.props.tempmax.toFixed(1)}°C{\" \"}\n          </p>\n        </div>\n        <div>\n          <p>{this.props.icon}</p>\n        </div>\n      </Containerweather>\n    );\n  }\n}\n\nexport default WeeksDetail;\n\nconst Containerweather = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nclass CityDetail extends React.Component {\n  constructor(props) {\n    super();\n    this.state = {};\n    //console.log(props.data1);\n  }\n\n  // componentDidMount(){\n  //     fetch('https://api.apixu.com/v1/current.json?key=dd644d7e780742f8af1111744192707&q=Paris')\n  //     .then(respons => {respons.json()\n  //       // .then(data=> {this.setState({current:data.current,location:data.location});console.log(data)\n  //       .then(data=> {this.setState(data);console.log(data)\n  //       })\n  //     })\n  //     .catch(err => console.log('err'))\n  // }\n\n  //  async componentDidMount(){\n  //    await fetch('https://api.apixu.com/v1/current.json?key=dd644d7e780742f8af1111744192707&q=Paris')\n  //     .then(respons => respons.json())\n  //     .then(data=> this.setState(data))\n  //     // .then(data=>this.setState({current:data.current,location:data.location})\n  //     .catch(err => console.log('err'))\n  //     console.log(this.state.data)\n  // }\n\n  render() {\n    return (\n      <WeatherLeftPart>\n        <TempContainer>\n          <strong>{this.props.temp} °C</strong>\n        </TempContainer>\n\n        <div>\n          <h3>{this.props.condition}</h3>\n        </div>\n\n        <OtherContainer>\n          <div>\n            <h5>HUMIDITY</h5>\n            <h5>{this.props.humidity}%</h5>\n          </div>\n          <div>\n            <Line></Line>\n          </div>\n          <div>\n            <h5>WIND</h5>\n            <h5>{this.props.wind}K/m</h5>\n          </div>\n        </OtherContainer>\n      </WeatherLeftPart>\n    );\n  }\n}\n\nexport default CityDetail;\n\n// const Box = styled.div`\n// min-width:100px;\n// width:400px;\n// max-width: 100%;\n\n// `;\n\nconst WeatherLeftPart = styled.div`\n  height: 100%;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  color: black;\n`;\n\nconst TempContainer = styled.div`\n  font-size: 50px;\n  display: flex;\n\n  text-align: center;\n`;\nconst OtherContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n  align-items: flex-start;\n  width: 60%;\n`;\n\nconst Line = styled.div`\n  float: left;\n  border-left: solid 2px;\n  height: 90px;\n`;\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport WeeksDetail from \"./WeeksDetail\";\nimport CityDetail from \"./CityDetail\";\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n\nconst API = `https://api.darksky.net/forecast/c3ed55bedc8f402d7fcfd7078fb8f5a4/-33.8688,151.2093?units=si`;\n\nconst Dashboard = () => {\n  const [weatherData, setWeatherData] = useState([]);\n  //const [forecastData, setForecastData] = useState([]);\n  const [cityId, setCityId] = useState(\"-33.8688,151.2093\");\n\n  const saveData = () => {\n    getWeatherData(cityId).then(data => {\n      setWeatherData(data);\n\n      console.log(data);\n    });\n\n    // getForecasData(cityId).then(dataf => {\n    //   setForecastData(dataf);\n    //   console.log(dataf);\n    // });\n  };\n  const getWeatherData = cityId => {\n    return fetch(\n      `${proxyurl}https://api.darksky.net/forecast/c3ed55bedc8f402d7fcfd7078fb8f5a4/${cityId}?units=si`,\n      {\n        method: \"GET\"\n      }\n    )\n      .then(response => {\n        return response.json();\n      })\n      .catch(err => console.log(err));\n  };\n\n  // const getForecasData = cityId => {\n  //   return fetch(\n  //     `https://api.openweathermap.org/data/2.5/forecast?id=${cityId}&APPID=2d8913a5d45c3cca163e0800b1431113&units=metric`,\n  //     {\n  //       method: \"GET\"\n  //     }\n  //   )\n  //     .then(response => {\n  //       return response.json();\n  //     })\n  //     .catch(err => console.log(err));\n  // };\n\n  const handleChange = name => event => {\n    setCityId(event.target.value);\n    console.log(cityId);\n  };\n\n  useEffect(() => saveData(), [cityId]);\n  return (\n    <Container>\n      <Containerweather>\n        <Left>\n          {weatherData && weatherData.currently && (\n            <div>\n              <CityDetail\n                data1={weatherData}\n                temp={weatherData.currently.temperature}\n                humidity={weatherData.currently.humidity}\n                wind={weatherData.currently.windSpeed}\n                condition={weatherData.currently.summary}\n              />\n            </div>\n          )}\n        </Left>\n\n        <Right>\n          <div>\n            {\" \"}\n            <strong>\n              <h1>{weatherData.timezone}</h1>\n            </strong>\n          </div>\n          <div>\n            <select\n              className=\"form-control\"\n              id=\"city\"\n              name=\"city\"\n              value={cityId}\n              onChange={handleChange()}\n            >\n              <option value=\"-33.8688,151.2093\">Sydney</option>\n              <option value=\"35.6762,139.6503\">Tokyo</option>\n              <option value=\"48.8566,2.3522\">Paris</option>\n              <option value=\"39.9042,116.4074\">Shanghai</option>\n            </select>\n          </div>\n        </Right>\n      </Containerweather>\n\n      <Buttompart>\n        {weatherData &&\n          weatherData.daily &&\n          weatherData.daily.data.map((day, i) => {\n            if (i !== 0) {\n              return (\n                <WeeksDetail\n                  key={i}\n                  date={day.time}\n                  icon={day.icon}\n                  tempmin={day.temperatureLow}\n                  tempmax={day.temperatureHigh}\n                  sum={day.summary}\n                ></WeeksDetail>\n              );\n            }\n          })}\n      </Buttompart>\n\n      {/* <WeeksDetail\n          key={1}\n            date={weatherData.daily.data[0].time}\n            icon={weatherData.daily.data[0].icon}\n            tempmin={weatherData.daily.data[0].temperatureLow}\n            tempmax={weatherData.daily.data[0].temperatureHigh}\n            sum={weatherData.daily.data[0].summary}\n          ></WeeksDetail>  */}\n    </Container>\n  );\n};\n\nexport default Dashboard;\n\nconst Container = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  text-align: center;\n  flex-direction: column;\n  align-items: stretch;\n  max-width: 1200px;\n  max-height: 800px;\n  min-width: 410px;\n  margin: 0 auto;\n`;\n\nconst Containerweather = styled.div`\n  display: flex;\n  flex: 6;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n  background-color: #ffffffbf;\n  margin: 100px 50px 0 50px;\n  min-width: 640px;\n`;\n\nconst Left = styled.div`\n  flex: 1;\n`;\n\nconst Right = styled.div`\n  flex: 1;\n`;\n\nconst Buttompart = styled.div`\n  flex: 5;\n  display: flex;\n  flex-direction: row;\n  background-color: #ffffffbf;\n  margin: 1px 50px 50px 50px;\n  justify-content: center;\n  min-width: 640px;\n`;\n","import React from \"react\";\nimport Dashboard from \"./page\";\nimport \"./App.css\";\nimport \"./Background.css\";\n\nfunction App() {\n  return (\n    <div id=\"background\">\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}